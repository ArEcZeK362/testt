// pages/api/invitation.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import clientPromise from '../lib/mongodb';

interface Invitation {
  name: string;
  location: string;
  date: string;
  time: string;
}

export async function GET(req: NextApiRequest, res: Response) {
  try {
    const client = await clientPromise;
    const db = client.db('osoby_osiemnastka');
    const invitation = await db.collection('zaproszeni').findOne({});

    if (!invitation) {
      res.status(404).json({ error: 'Invitation not found' });
    }
    console.log('GETETTETE');
    res.status(200).json(invitation);
  } catch (e) {
    console.log('fail getete');
    //console.error(e);]
    //const obj = { error: "err" };
    //const blob = new Blob([JSON.stringify(obj, null, 2)], { type: "application/json" });
    //return new Response(blob, { status: 500 });
    return res.status(500).json({ error: 'Internal Server Error' });
  }
}

export async function POST(req: NextApiRequest, res: NextApiResponse) {
  try {
    const client = await clientPromise;
    const db = client.db('osoby_osiemnastka');
    const newInvitation: Invitation = req.body;

    if (!newInvitation.name || !newInvitation.location || !newInvitation.date || !newInvitation.time) {
      res.status(400).json({ error: 'Missing fields' });
    }

    const result = await db.collection('zaproszeni').insertOne(newInvitation);
    res.status(201).json({ message: 'Invitation created', id: result.insertedId });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}

export async function DELETE(req: NextApiRequest, res: NextApiResponse) {
  try {
    const client = await clientPromise;
    const db = client.db('osoby_osiemnastka');

    const result = await db.collection('zaproszeni').deleteOne({});

    if (result.deletedCount === 0) {
      res(404).json({ error: 'No invitation found to delete' });
      return;
    }

    res.status(200).json({ message: 'Invitation deleted' });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}
